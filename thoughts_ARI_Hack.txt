Thoughts:

There are a variety of image file types, some of them require special software and lib to read;
the raw jpg images were taken from different height, angel, and some photos has partial or non houses presented;
the orthomosaic images have done the image rectification, correction, so is good to measure distance, a question is
would orthomosaic image be available in testing data as well? can it be used as one of the training data to build a model?
we have 3d mesh(wavefront called, has .obj and .mtl files), point cloud, dsm(tiff) which I guess are all for 3d? how we can read those files and how to use them? 
what differences and how they can be used together with orthomosaic? how image coordiatnes are interprated?

pyglet and pywavefront were installed to read wavefront objects:
install pyglet: pip install pyglet
install pywavefront: download https://github.com/greenmoss/PyWavefront, goto the top directoy
, python setup.py install and pip install PyWavefront, see https://github.com/greenmoss/PyWavefront,
then test using import pywavefront

pcl installation:
conda install -c ccordoba12 python-pcl=0.2
following https://anaconda.org/ccordoba12/python-pcl

PIL can be used to read tiff images

07/30/2016
Tried to use pywavefront to read .obj data in 3d mesh folder, when running the script in jupyter notebook,
gets error cant find file in the path, tried to use os.chdir and sys.path.append, none of them work, and then
I tried to run test.py in the folder, it says found texture coordiantes, but no normals;
Tries to run the pyglet_demo.py in pywavefront-master/example folder, it ran successfully using uv_sphere.obj,
when changed to use test.obj cced from 3d_mesh,got same error not found the normals

07/31/2016
pics were taken at 100 feet as video says mostly, each pic's taken coordiante and altitude
was taken, but not sure the units; UVA will follow a pre-programmed 
Thoughts on approach the project:
1. way to filter in only roof images(33 -34 were used out of 80 for pix4d)
2. way to find the right components to rebuild the house geometrically
3. identify in each picture, if there is a geometric component exists, if yes, 
find a way to crop it, and calculate the cropped part's area
4. add up the geometric component's area

gotchas: find the right house if multiple houses exist;
         same component may get different areas estimated;
         slopes, ridges estimation?
         maybe a good way to count the number of bricks? and extrapolate to roof area
         that would solve the slope calculation as well
         
Immediate to-dos: gets software ready to read all the files, point cloud, 3d- mesh
				  find a big portion of the house, and find a way to crop a geometric component
				  find a way to extract shape and compare if it is the same shape

08/03/2016
Thoughts:
use the tiff, xyz, dsm data
raster data not efficient
extract polygons and convert into vector data to calculate area
maybe covert to shape files? which needs at least one attribute field

08/05/2016
shape file is converted and polygons saved, however:
need to find a way to visualize the shapes, tune the filter, and get the geo reference info
probably need to understand more the shape file and how to query the attribute, field and do some calculation from there

08/06/2016
pip install pyshp -- to get shapefile module
pip install descartes -- to get descartes module

link to print shape file: http://gis.stackexchange.com/questions/131716/plot-shapefile-with-matplotlib
http://gis.stackexchange.com/questions/93136/how-to-plot-geo-data-using-matplotlib-python/93201#93201